name: Build and deploy to pantheon

on:
  push:
    branches:
      - master
      - feature-*
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          # The MySQL docker container requires these environment variables to be set
          # so we can create and migrate the test database.
          # See: https://hub.docker.com/_/mysql
          MYSQL_DATABASE: testdb
          MYSQL_ROOT_PASSWORD: testrootpass
        ports:
          # Opens port 3306 on service container and host
          # https://docs.github.com/en/actions/using-containerized-services/about-service-containers
          - 3306:3306
          # Before continuing, verify the mysql container is reachable from the ubuntu host
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
# Use ssh-keygen to generate ssh key
# Convert the ssh key to PEM format using ssh-keygen -p -m PEM -f [NAME_OF_SSH_KEY_PLACEHOLDER]
# Add private key to repository secret
# Add publick key to the server where you want to deploy, in this case pantheon
# Ref https://medium.com/swlh/pantheon-and-github-actions-automated-deployments-via-github-actions-c245aa954797
      - name: Add ssh key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          config: ${{ secrets.SSH_CONFIG }}
      - name: Validate composer
        run: composer validate
      - name: Verify testdb DB exists
        run: mysql --host 127.0.0.1 --port 3306 -uroot -ptestrootpass -e "SHOW DATABASES LIKE 'testdb'"
# Add cache for composer dependecnies.
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependency
        run: composer install
# setup a php and mysql environment.
      - name: Setup PHP with composer v2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2
      - name: Install the drupal site
        run: |
          ./vendor/bin/drush --version
          ./vendor/bin/drush si
          ./vendor/bin/drush status
      - name: Configuration for unit test
        run: |
          cp ./web/core/phpunit.xml.dist ./web/core/phpunit.xml
          sed -i 's|name="SIMPLETEST_BASE_URL" value=""|name="SIMPLETEST_BASE_URL" value="http://127.0.0.1"|g' ./web/core/phpunit.xml
          sed -i 's|name="SIMPLETEST_DB" value=""|name="SIMPLETEST_DB" value="mysql://root:testrootpass@127.0.0.1/testdb"|g' web/core/phpunit.xml
          sed -i 's|name="BROWSERTEST_OUTPUT_DIRECTORY" value=""|name="BROWSERTEST_OUTPUT_DIRECTORY" value="./web/sites"|g' ./web/core/phpunit.xml
      - name: Run unit test
        run: |
          ./vendor/bin/phpunit -c ./web/core --testsuite=unit
      - name: Deploy the code
        run: |
          git remote add pantheon ${{ secrets.GIT_REPO_URL }}
          git push pantheon ${{ github.ref_name }}
      - name: Deployed status
        run: echo "Deployed ...."
